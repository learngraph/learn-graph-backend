type Query {
  graph: Graph
}

# currently unused (always null)
type Status {
  Message: String!
}

input Text {
  translations: [Translation!]!
}

input Translation {
  language: String!
  content: String!
}

type CreateNodeResult {
  ID: ID
  Status: Status
}

type Mutation {
  submitVote(id: ID!, value: Float!): Status
  createNode(description: Text): CreateNodeResult
  editNode(id: ID!, description: Text): Status
}

type Node {
  id: ID!
  description: String!
}

type Edge {
  id: ID!
  from: ID! # node id
  to: ID! # node id
  weight: Float!
}

type Graph {
  nodes: [Node!]
  edges: [Edge!]
}
