type Query {
  graph: Graph
}

type Error {
  Message: String
}

input Translation {
  language: String
  content: String
}

input Translations {
  translations: [Translation!]!
}

type Mutation {
  submitVote(source: ID!, target: ID!, value: Float!): Error
  createNode(description: Translations): Error
  editNode(id: ID!, description: [Translation!]!): Error
}

type Node {
  id: ID!
}

type Edge {
  id: ID!
  from: ID! # node id
  to: ID! # node id
}

type Graph {
  nodes: [Node!]
  edges: [Edge!]
}