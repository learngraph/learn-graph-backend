// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/suxatcode/learn-graph-poc-backend/internal/controller (interfaces: Layouter)

// Package controller is a generated GoMock package.
package controller

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/suxatcode/learn-graph-poc-backend/graph/model"
	layout "github.com/suxatcode/learn-graph-poc-backend/layout"
)

// MockLayouter is a mock of Layouter interface.
type MockLayouter struct {
	ctrl     *gomock.Controller
	recorder *MockLayouterMockRecorder
}

// MockLayouterMockRecorder is the mock recorder for MockLayouter.
type MockLayouterMockRecorder struct {
	mock *MockLayouter
}

// NewMockLayouter creates a new mock instance.
func NewMockLayouter(ctrl *gomock.Controller) *MockLayouter {
	mock := &MockLayouter{ctrl: ctrl}
	mock.recorder = &MockLayouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLayouter) EXPECT() *MockLayouterMockRecorder {
	return m.recorder
}

// GetNodePositions mocks base method.
func (m *MockLayouter) GetNodePositions(arg0 context.Context, arg1 *model.Graph) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetNodePositions", arg0, arg1)
}

// GetNodePositions indicates an expected call of GetNodePositions.
func (mr *MockLayouterMockRecorder) GetNodePositions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodePositions", reflect.TypeOf((*MockLayouter)(nil).GetNodePositions), arg0, arg1)
}

// Reload mocks base method.
func (m *MockLayouter) Reload(arg0 context.Context, arg1 *model.Graph) layout.Stats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", arg0, arg1)
	ret0, _ := ret[0].(layout.Stats)
	return ret0
}

// Reload indicates an expected call of Reload.
func (mr *MockLayouterMockRecorder) Reload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockLayouter)(nil).Reload), arg0, arg1)
}
